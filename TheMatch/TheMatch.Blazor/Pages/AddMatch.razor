@page "/addmatch"
@inject Domain.ICourseRepository CourseRepository
@inject Domain.IMatchRepository MatchRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime js;

<div class="col-sm-3">

    @if (isLoading)
    {
        <div class="loader">Loading...</div>
    }
    else
    {

        <EditForm Model="@newMatch" OnSubmit="@FormSubmitted">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Match Name :</label>
                <InputText id="txtName" class="form-control" @bind-Value="@newMatch.Name" />
                <ValidationMessage For="@(() => newMatch.Name)" />
            </div>
            <div class="form-group">
                <label>Course :</label>
                <select class="selectpicker form-control" @onchange="NewCourseSelected">
                    <option value="-1">--select course--</option>
                    @foreach (var course in courses)
                    {
                        <option value="@course.Id">@course.Name</option>
                    }
                </select>
            </div>
            <TheMatch.Blazor.Components.Course PassedCourse="@selectedCourse" />

            <button type="submit" class="btn btn-primary">Add New Match</button>
        </EditForm>
    }

</div>

@code {
    private List<Domain.Course> courses;
    private Domain.Course selectedCourse;
    private Domain.Match newMatch = new Domain.Match { Name = "", Course = new Domain.Course() };

    private bool isLoading = true;

    string LastSubmitResult;

    protected override async Task OnInitializedAsync()
    {
        courses = await CourseRepository.GetCoursesAsync();
        isLoading = false;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("focusById", "txtName");
        }
    }

    void FormSubmitted(EditContext editContext)
    {
        bool formIsValid = editContext.Validate();
        LastSubmitResult =
          formIsValid
          ? "Success - form was valid"
          : "Failure - form was invalid";

        if (formIsValid)
        {
            newMatch.Course = selectedCourse;
            MatchRepository.Add(newMatch);
            //MatchRepository.Save();
            NavigationManager.NavigateTo("Match/" + newMatch.Id);
        }
    }

    void NewCourseSelected(ChangeEventArgs e)
    {
        newMatch.Course.Id = Int32.Parse(e.Value.ToString());
        selectedCourse = CourseRepository.GetCourse(newMatch.Course.Id);
    }

    public void PlayerSelected()
    {

    }

    public void PlayerUnSelected()
    {

    }

}
